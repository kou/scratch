#!/usr/bin/env gosh

(use gauche.parameter)
(use util.list)
(use test.unit)
(use scratch.session)

(require "test/util")

(define-test-case "scratch session test"
  ("make-scratch-session test"
   (assert-each-list-elem
    (lambda (key&values . args)
      (list (apply make-scratch-session args)
            key&values))
    :assert-proc (lambda (s key&values)
                   (for-each (cut apply
                                  (lambda (key value . keywords)
                                    (let-keywords* keywords ((exists? #t))
                                      (assert eq? exists? (value-exists? s key)
                                              (string-append
                                               #`"key=`,|key|' must "
                                               (if exists? "" "not ")
                                               "exist"))
                                      (assert-equal value (get-value s key))))
                                  <>)
                             key&values))
    :lists '((((not-exist #f :exists? #f)
               (not-exist2 #f :exists? #f)))
             (((exist #t)) :exist #t)
             (((int 1)
               (string "str")
               (keyword :key))
              :int 1 :string "str" :keyword :key)
             (((key 10)) :key 1 :key 10)))
   (assert-each (lambda args
                  (assert-error (lambda () (apply make-scratch-session args))))
                '((:one-keyword)
                  (not-keyword-but-has-value 1)
                  (not-keyword-and-no-value))))
  ("get/set/delete/exists? test test"
   (for-each (lambda (args)
               (apply
                (lambda (get set! delete! exists?)
                  (assert-each (lambda (key value)
                                 (let ((s (make-scratch-session)))
                                   (assert-false (exists? s key))
                                   (assert-false (delete! s key))
                                   (assert-false (get s key))
                                   (set! s key value)
                                   (assert-equal value (get s key))
                                   (assert-true (exists? s key))
                                   (assert-true (delete! s key))
                                   (assert-false (exists? s key))
                                   (assert-false (delete! s key))))
                               '((int 1)
                                 (str "str")
                                 (key :key)
                                 (sym sym))))
                args))
             (list (list get-value set-value! delete-value! value-exists?)
                   (list get-response-value set-response-value!
                         delete-response-value! response-value-exists?))))
  ("response-info-list test"
   (define (compare x y)
     (string>? (x->string (car x))
               (x->string (car y))))
   (assert-each (lambda (expected . args)
                  (let ((s (make-scratch-session)))
                    (for-each (lambda (elem)
                                (apply (lambda (key value)
                                         (set-response-value! s key value))
                                       elem))
                              (slices args 2))
                    (assert-equal (sort (slices expected 2) compare)
                                  (sort (slices (response-info-list s) 2)
                                        compare))))
                '((())
                  ((:a 1) a 1)
                  ((:a 2) a 1 a 2)
                  ((:a 1 :b 2) a 1 :b 2)
                  ((:b 2 :a 1) a 1 :b 2)
                  ((:a 1 :b 2) :b 2 a 1)
                  ((:a 1 :b 2 :c 3) a 1 :b 2 "c" 3))))
  )

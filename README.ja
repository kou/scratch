# -*- rd -*-

= README.ja

$Id$

== 作者

Kouhei Sutou <kou@cozmixng.org>

== ライセンス

GPL or BSD License

== メーリングリスト

((<COZMIXNG RWiki - 連絡先|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=%CF%A2%CD%ED%C0%E8>))を御覧下さい．

== なにこれ？

Gauche用のサーバ/クライアント方式Webベースアプリケーションフ
レームワークです．現在はHTTP用モジュールしかありませんが，将
来はSMTPやGUIツールキット用のモジュールも追加しようと思って
います．

以下のような機能があります．

  * セッション管理
  * ユーザ管理
  * スコープ別データ管理
  * アクセス制御
  * セッションのタイムアウト管理
  * 取り換え可能なユーザ/セッション管理モジュール
  * CGIクライアントのサポート
  * ((<esm|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=esm>))
    のサポート

以下のような機能もあればいいなと思っています．

  * I18N
  * プラグイン
    * セッション管理とユーザ管理もプラグイン化したいな．
  * SMTP経由のクライアントのサポート
  * esm以外の(MVCの)View構築支援ライブラリのサポート
  * ログ出力
  * グループ(あるいは役割(role))によるアクセス制御

以下のような機能はさほど興味がありません．

  * サーブレット毎の起動/終了
    * プロジェクト毎に一つサーバを立てればいいのでは？

  * オンラインパッチ
    * 特定のポートでREPLすればいいだけなので簡単だけど，アク
      セス制御とかすると面倒だから．

== 依存ライブラリ

  * ((<esm|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=esm>))
  * ((<dsm|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=dsm>))
  * ((<marshal|URL:http://www.cozmixng.org/~rwiki/index.rb?cmd=view;name=marshal>))

== 入手方法

((<URL:http://www.cozmixng.org/~kou/download/scratch.tar.gz>))

  % svn co http://www.cozmixng.org/repos/gauche/scratch/trunk scratch

== インストール

  # gosh install/install.scm

== 構造

  +------------+          +----------------------------------------------------+
  |            |   dsm    |                                                    |
  |            | ------>  |            ----->              ------>             |
  |            |    id    |              id                session             |
  |            |  action  |             action             others              |
  |            |  others  |             others                                 |
  |クライアント|         scratchサーバ         サーブレット        アクション  |
  |   CGI等    |   dsm    |                                                    |
  |            | <------  |            <------             <------             |
  |            |   header |             header              view-name          |
  |            |   result |             result                                 |
  |            |          |                       /\  |                        |
  |            |          |                result |   | session                |
  |            |          |                       |   | others                 |
  |            |          |                       |   \/                       |
  |            |          |                      ビュー                        |
  |            |          |                       esm等                        |
  +------------+          +----------------------------------------------------+

=== クライアント

現在，クライアント用ライブラリとしてCGI用のライブラリのみ提
供しています．このライブラリを使うことによりCGIスクリプトは
以下のように書くだけでよくなります．

  #!/usr/local/bin/gosh

  (use dsm.client)
  (use scratch.client.cgi)

  (define (main args)
    (scratch-cgi-main (connect-server :host "scratchサーバが動いているホスト名"
                                      :port ポート番号)
                      "サーブレットのマウントポイント"))

=== scratchサーバ

scratchサーバはホスト名とポート番号で識別されます．よって，
scratchサーバを作成するときは以下のようになります．

  (make-scratch-server :host "localhost" :port 5969)

ホスト名/ポート番号はともに省略することができ，省略された場
合は"localhost"/59102を指定したものとみなされます．これは
<dsm-server>の初期値に依存しています．

scratchサーバには複数のサーブレットをマウントすることができ
ます．各サーブレットはマウントポイントによって識別されます．
scratchサーバにサーブレットをマウントするときは以下のように
します．

  (add-mount-point! scratchサーバ "マウントポイント" サーブレット)

マウントしただけではscratchサーバはクライアントからの接続を
受け付けません．クライアントからの接続を受け付けるために以下
のようにしてクライアントからの接続を受け付けるループに入りま
す．

  (start-scratch-server scratchサーバ)

scratchサーバを起動するスクリプトは以下のようになるでしょう．

  #!/usr/bin/env gosh

  (use dsm.server)
  (use scratch.server)

  (define (main args)
    (let ((server (make-scratch-server :port 5963)))
      (add-mount-point! server "/sample" (make-sample-servlet))
      (start-scratch-server server)))

=== サーブレット

サーブレットはクライアントからのリクエストから適切なアクショ
ンを呼び出します．アクションの結果により適切なビューを呼び出
し，クライアントに返します．

サーブレットにはユーザ管理機能/アクセス制御機能を組み込むこ
とができます．デフォルトでは組み込まれていません．

サーブレットはそれぞれモジュールを持っています．サーブレット
のモジュールの下にはアクションやビューが配置されます．サーブ
レット用のディレクトリ構成は以下のようになります．ここで，サー
ブレットのモジュール名はsample-servletとします．

  . --+-- sample-servlet.scm
      |
      +-- sample-servlet --+-- action.scm
                           |
                           +-- view --+-- http.scm
                                      |
                                      +-- http --+-- *.esm

sample-servlet.scmはサーブレットを作成するために使います．例
えば，以下のようになります．

  (define-module sample-servlet
    (use scratch.servlet)
    (export make-sample-servlet))
  (select-module sample-servlet)

  (define (make-number-table-servlet)
    (make <scratch-servlet>
      :servlet-module-name 'sample-servlet))

  (provide "sample-servlet")

ユーザ管理機能を組み込むには以下のようにします．

  (define-module sample-servlet
    (use scratch.servlet)
    (use scratch.db.file)
    (use scratch.user.manager.file)
    (export make-sample-servlet))
  (select-module sample-servlet)

  (define (make-number-table-servlet)
    (make <scratch-servlet>
      :servlet-module-name 'sample-servlet
      :user-manager (make <user-manager-file>)))

  (provide "sample-servlet")

アクセス制御機能を組み込むには以下のようにします．

  (define-module sample-servlet
    (use scratch.servlet)
    (use scratch.db.file)
    (use scratch.user.manager.file)
    (export make-sample-servlet))
  (select-module sample-servlet)

  (define (make-number-table-servlet)
    (make <scratch-servlet>
      :servlet-module-name 'sample-servlet
      :user-manager (make <user-manager-file>
                      :default-authority 'deny
                      :authority-map '((#t add-user)))))

  (provide "sample-servlet")

この例では，デフォルトで全てのアクションは拒否し
(:default-authoriy 'deny)，add-userというアクションだけは全
てのユーザに許可(:authority-map '((#t add-user)))します．

それでは，以下のような制御にする例を示します．

  * デフォルトで全てのアクションを許可
  * guestユーザはresetアクションを拒否
  * 全てのユーザはadminアクションを拒否
    * ただし，masterユーザには全てのアクションを許可

ここでは，:user-managerの部分だけ示します．

  (make <user-manager-file>
    :default-authority 'allow
    :authority-map '((guest reset admin)
                     (master)
                     (#t admin)))

sample-servlet.scmは必須ではありませんが，慣習的にサーブレッ
トを作成するために用いるようになるでしょう．

=== アクション

=== ビュー

=== scratchが管理するデータ

scratchで管理するデータには3種類のスコープがあります．

  (1) サーブレット単位
  (1) セッション単位
  (1) サイクル単位

== 使い方

scratchを用いたWebベースアプリケーション開発は以下のようにな
るでしょう．

  * アプリケーションの機能を提供するライブラリの作成
  * クライアントの要求に対応するアクションの作成
  * クライアントに返す結果を生成するesmの作成

最初のライブラリの作成はscratchに依存しないようにするべきで
す．依存しないようにするとscratchを使うことをやめても使いま
わすことができます．

ここでは，ライブラリはすでにできているものとしてアクションの
作成とesmの作成を扱います．

=== アクションの作成

まず，アクションを扱うモジュールを作成します．

  (define-module sample-app-servlet
    (use scratch.servlet)
    (use sample-app))
  (select-module sample-app-servlet)
  (provide "sample-app-servlet")

ここで，sample-appというモジュールがアプリケーションの機能を
提供するライブラリで，sample-app-servletがクライアントの要求
に対応するアクションを扱うモジュールです．

